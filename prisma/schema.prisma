// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// model Example {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model MdbUser {
  id Int @id @default(autoincrement())
  username String @unique
  pwHash String
  name String
  surname String
  age Int?
  comments Comment[]
  likes MovieLike[]
  ratings MovieRating[]
  watchLater Movie[]
}

model Movie {
  id Int @id
  title String
  overview String @db.VarChar(500)
  tagline String @db.VarChar(300)
  releaseDate String
  posterPath String
  runtime Int
  ratings Float
  Status String
  backdropPath String
  userToWatch MdbUser[]
  nativeRatings MovieRating[]
  likes MovieLike[]
  comments Comment[]
  genres Genre[] //implicit m-n relation
}

model MovieRating {
  authorId Int
  movieId Int
  rating Int
  Movie Movie @relation(fields: [movieId], references: [id])
  Author MdbUser @relation(fields: [authorId], references: [id])
  @@index(movieId)
  @@index(authorId)
  @@id([authorId, movieId])
}

model Genre {
  id Int @id
  name String
  movies Movie[] //implicit m-n relation
}

// model MovieGenre {
//   movieId Int
//   genreId Int
//   MGenre Movie @relation(fields: [])

//   @@id([movieId, genreId])
//   @@index([])
// }

model Comment {
  id Int @id @default(autoincrement())
  authorId Int
  movieId Int
  comment String @db.VarChar(500)
  CommAuthor MdbUser? @relation(fields: [authorId], references: [id])
  CommedMovie Movie? @relation(fields: [movieId], references: [id])

  @@index(authorId)
  @@index(movieId)
}

model MovieLike {
  authorId Int @id
  LikeAuthor MdbUser @relation(fields: [authorId], references: [id])
  movieId Int
  LikedMovie Movie @relation(fields: [movieId], references: [id])

  @@index([authorId])
  @@index([movieId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
